package com.was.inventory.controller;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.was.inventory.Repositories.*;
import com.was.inventory.model.*;
import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.hibernate.validator.constraints.NotBlank;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.Map;

/**
 * @author Waseem ud din
 * @version 0.1
 */
@Controller // This means that this class is a Controller
@RequestMapping(path = "/inventory") // This means URL's start with /demo (after Application path)
public class RequestController {

    private static final Logger logger = LogManager.getLogger(RequestController.class);
    private static final String uploadingdir = System.getProperty("user.dir") + "/imagesrepo/";

    private CustomerRepository customerRepository;
    private PaymentRepository paymentRepository;
    private PaymentMethodRepository paymentMethodRepository;
    private SupplierRepository supplierRepository;
    private ItemRepository itemRepository;
    private SaleRepository saleRepository;
    private PurchaseRepository purchaseRepository;
    private OrderRepository orderRepository;
    private CategoryRepository categoryRepository;
    private ObjectMapper mapper;

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private void RequestController(CustomerRepository customerRepository,
                                   SupplierRepository supplierRepository,
                                   PaymentRepository paymentRepository,
                                   PaymentMethodRepository paymentMethodRepository,
                                   SaleRepository saleRepository,
                                   ItemRepository itemRepository,
                                   PurchaseRepository purchaseRepository,
                                   OrderRepository orderRepository,
                                   CategoryRepository categoryRepository,

                                   ObjectMapper mapper) {

        this.customerRepository = customerRepository;
        this.supplierRepository = supplierRepository;
        this.paymentMethodRepository = paymentMethodRepository;
        this.paymentRepository = paymentRepository;
        this.orderRepository = orderRepository;
        this.saleRepository = saleRepository;
        this.itemRepository = itemRepository;
        this.purchaseRepository = purchaseRepository;
        this.categoryRepository = categoryRepository;
        this.mapper = mapper;
    }

    @RequestMapping(value = "/add/{type}", method = RequestMethod.POST, consumes = "application/json")
    public @ResponseBody
    ResponseEntity<JsonNode> addData(@NotBlank @RequestBody String requestBody,
                                     @PathVariable String type) {
//                                     @RequestParam(value = "payment", required = false) String payment) {

        logger.debug("Request for the inserting the data.");
        ObjectNode responseBody = mapper.createObjectNode();

        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        Map<String, Object> requestMap = new HashMap<String, Object>();
        logger.debug("Checking the condition of the type.");
        switch (type) {
            case "customer": {
                logger.debug("The condition for insertion of customer");
                logger.debug("Creating the reference of the Customer class.");
                Customer customer = null;
                try {
                    logger.info("Writing the value into the object of the information (Customer) using the request.");
                    customer = mapper.readValue(requestBody, Customer.class);
                } catch (IOException e) {

                    logger.error("Error while writing the information (Customer) data into its object", e);
                }

                try {
                    logger.info("Inserting the record into the database via customer");
                    customerRepository.save(customer);
                } catch (DataIntegrityViolationException e) {
                    logger.error("Error while inserting the Customer data into its database table.", e);
                    return ResponseEntity.status(HttpStatus.CONFLICT).body(responseBody.put("error", e.getCause().toString()));
                }

                break;
            }
            case "supplier": {
                logger.debug("The condition for insertion of Supplier");
                logger.debug("Creating the reference of the Supplier class.");
                Supplier supplier = null;
                try {
                    logger.info("Writing the value into the object of the supplier (Supplier) using the request.");
                    supplier = mapper.readValue(requestBody, Supplier.class);
                } catch (IOException e) {
                    logger.error("Error while writing the supplier (Supplier) data into its object", e);
                }

                try {

                    logger.info("Inserting the record into the database via supplier");
                    supplierRepository.save(supplier);
                } catch (DataIntegrityViolationException e) {
                    logger.error("Error while inserting the supplier (Supplier) data into its database table.", e);
                    return ResponseEntity.status(HttpStatus.CONFLICT).body(responseBody.put("error", e.getCause().toString()));
                }

                break;

            }
            case "payment": {

                logger.debug("The condition for the insertion of the payment.");

                logger.debug("Creating the reference of the Payment class.");
                Payment payment = null;
                try {
                    logger.info("Writing the value into the object of the payment using the request.");
                    payment = mapper.readValue(requestBody, Payment.class);
                } catch (IOException e) {
                    logger.error("Error while writing the payment data into its object", e);
                }

                try {

                    logger.info("Inserting the record into the payment table via its object");
                    paymentRepository.save(payment);
                } catch (DataIntegrityViolationException e) {
                    logger.error("Error while inserting the payment data into its database table.", e);
                    return ResponseEntity.status(HttpStatus.CONFLICT).body(responseBody.put("error", e.getCause().toString()));
                }

                break;
            }

            case "paymentMethod": {

                logger.debug("The condition for insertion of paymentMethod");
                logger.debug("Creating the reference of the paymentMethod class.");
                PaymentMethod paymentMethod = null;
                try {
                    logger.info("Writing the value into the object of the paymentMethod using the request.");
                    paymentMethod = mapper.readValue(requestBody, PaymentMethod.class);
                } catch (IOException e) {

                    logger.error("Error while writing the paymentMethod data into its object", e);
                }

                try {
                    logger.info("Inserting the record into the table of PaymentMethod");
                    paymentMethodRepository.save(paymentMethod);
                } catch (DataIntegrityViolationException e) {
                    logger.error("Error while inserting the PaymentMethod data into its database table.", e);
                    return ResponseEntity.status(HttpStatus.CONFLICT).body(responseBody.put("error", e.getCause().toString()));
                }
                break;
            }

            case "itemCategory": {

                logger.debug("The condition for insertion of itemCategory");
                logger.debug("Creating the reference of the itemCategory class.");
                Category itemCategory = null;
                try {
                    logger.info("Writing the value into the object of the itemCategory using the request.");
                    itemCategory = mapper.readValue(requestBody, Category.class);
                } catch (IOException e) {

                    logger.error("Error while writing the itemCategory data into its object", e);
                }

                try {
                    logger.info("Inserting the record into the table of ItemCategory");
                    categoryRepository.save(itemCategory);
                } catch (DataIntegrityViolationException e) {
                    logger.error("Error while inserting the ItemCategory data into its database table.", e);
                    return ResponseEntity.status(HttpStatus.CONFLICT).body(responseBody.put("error", e.getCause().toString()));
                }
                break;
            }


        }
        return ResponseEntity.status(HttpStatus.OK).

                body(responseBody.put("success", "Inserted"));
    }

    @RequestMapping(value = "/get/{type}", method = RequestMethod.GET, produces = "application/json")
    public @ResponseBody
    ResponseEntity<JsonNode> getData(@PathVariable String type) {

        ObjectNode responseBody = new ObjectMapper().createObjectNode();
        logger.debug("Request received to get the data.");
        logger.debug("Checking the condition of the type.");
        switch (type) {
            case "customer": {
                logger.debug("The condition for getting the customers.");
                return ResponseEntity.status(HttpStatus.OK).body(mapper.valueToTree(customerRepository.findAll()));
            }
            case "supplier": {
                logger.debug("The condition for getting of Supplier");
                return ResponseEntity.status(HttpStatus.OK).body(mapper.valueToTree(supplierRepository.findAll()));

            }
//            case "payment":{
//
//                Payment payment = new Payment();
//                Customer customer = new Customer();
//                customer.setId(Integer.parseInt(requestMap.get("customer_id")));
//                Set paymentSet = new HashSet<Payment>();
//
//                break;
//            }

        }
        return ResponseEntity.status(HttpStatus.OK).body(responseBody.put("error", "Inserted"));

    }

    @RequestMapping(value = "/insert/item", method = RequestMethod.POST, consumes = "multipart/form-data")
    public @ResponseBody ResponseEntity<JsonNode> addItem(@RequestPart("file") MultipartFile file,
                                                          @NotBlank @RequestPart("data") String requestBody) {

        ObjectNode responseBody = new ObjectMapper().createObjectNode();
        logger.debug("In item insertion controller method.");


        logger.debug("Creating the reference of the item class.");
        Item item = null;
        try {
            logger.info("Writing the value into the object of the Item using the request.");
            item = mapper.readValue(requestBody, Item.class);
        } catch (IOException e) {
            logger.error("Error while writing the Item data into its object", e);
        }

        // Getting the information about the item so that store with specifics in the database

        if (file.isEmpty()) {
            return new ResponseEntity("please select a file!", HttpStatus.NO_CONTENT);
        }
        // Creating the file for writing it into the dirctory
        File newFile = new File(uploadingdir + item.getCategory().getId()+"/"+file.getOriginalFilename());
        newFile.getParentFile().mkdirs();
        try {
              file.transferTo(newFile);
        } catch (IOException e) {
            logger.error("Error Occured while trying to write an image file.");
            e.printStackTrace();
        }

        item.setPictureLink(newFile.getAbsolutePath());
        try {
            logger.info("Inserting the record into the Item table via its object");
            itemRepository.save(item);
        } catch (DataIntegrityViolationException e) {
            logger.error("Error while inserting the payment data into its database table.", e);
            return ResponseEntity.status(HttpStatus.CONFLICT).body(responseBody.put("error", e.getCause().toString()));
        }

        return ResponseEntity.status(HttpStatus.OK).body(responseBody.put("info", "Inserted"));

    }
}
